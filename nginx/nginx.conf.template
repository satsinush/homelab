# --- Default Server Block ---
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name ${HOMELAB_HOSTNAME};
    # Redirect HTTP to the admin page
    return 301 https://${DASHBOARD_WEB_HOSTNAME}$request_uri;
}

server {
    listen 443 ssl default_server; # Listen for HTTPS and make this the default SSL server
    http2 on;
    listen [::]:443 ssl default_server;
    server_name ${HOMELAB_HOSTNAME};

    # --- Certificate Paths (same as above for shared certificate) ---
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key;

    # Redirect HTTPS to the admin page
    return 301 https://${DASHBOARD_WEB_HOSTNAME}$request_uri;
}


# --- Pi-hole Server Block (HTTPS) ---
server {
    listen 80;
    server_name ${PIHOLE_WEB_HOSTNAME};
    return 301 https://$host$request_uri; # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl; # Listen for HTTPS traffic
    http2 on;
    server_name ${PIHOLE_WEB_HOSTNAME};

    # --- Certificate Paths ---
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;    # <--- NEW CERTIFICATE PATH
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key; # <--- NEW KEY PATH

    # --- Proxy Configuration for Pi-hole ---
    location / {
        proxy_pass http://pihole:80; 
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_hide_header X-Frame-Options;
        add_header X-Frame-Options "SAMEORIGIN";
    }
}


# Homelab Dashboard conf
server {
    listen 80;
    server_name ${DASHBOARD_WEB_HOSTNAME};
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${DASHBOARD_WEB_HOSTNAME};

    # --- Certificate Paths ---
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;    # <--- NEW CERTIFICATE PATH
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key; # <--- NEW KEY PATH

    # Proxy API requests to your Node.js backend
    location / {
        proxy_pass http://homelab-dashboard:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 3600s;  # Increase connection timeout
        proxy_send_timeout 3600s;     # Increase send timeout
        proxy_read_timeout 3600s;     # Increase read timeout (most important for 504)
    }
}

# --- Netdata Server Block (HTTPS) ---
server {
    listen 80;
    server_name ${NETDATA_WEB_HOSTNAME};
    return 301 https://$host$request_uri; # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${NETDATA_WEB_HOSTNAME};

    # --- Certificate Paths ---
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key;

    # --- Proxy Configuration for Netdata ---
    location / {
        proxy_pass http://netdata:19999;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Netdata specific headers for proper functioning
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 3600s; # Netdata can have long-lived connections
        proxy_send_timeout 3600s;
    }
}

# --- Portainer Server Block (HTTPS) ---
server {
    listen 80;
    server_name ${PORTAINER_WEB_HOSTNAME};
    return 301 https://$host$request_uri; # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${PORTAINER_WEB_HOSTNAME};

    # --- Certificate Paths ---
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key;

    # --- Proxy Configuration for Portainer ---
    location / {
        proxy_pass http://portainer:9000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # THIS BLOCK IS REQUIRED FOR THE EXEC CONSOLE AND LOGS
    location /api/websocket/ {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        # This is the port of the container
        proxy_pass http://portainer:9000/api/websocket/;
    }
}

# --- Vaultwarden Server Block (HTTPS) ---
server {
    listen 80;
    server_name ${VAULTWARDEN_WEB_HOSTNAME};
    return 301 https://$host$request_uri; # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${VAULTWARDEN_WEB_HOSTNAME};

    # --- Certificate Paths ---
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key;

    # --- Proxy Configuration for Portainer ---
    location / {
        proxy_pass http://vaultwarden:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # This location is required for WebSocket support, which is crucial for syncing.
    location /notifications/hub {
        proxy_pass http://vaultwarden:80;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# --- Uptime Kuma Server Block (HTTPS) ---
server {
    listen 80;
    server_name ${UPTIME_KUMA_WEB_HOSTNAME}; # Use your desired hostname
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${UPTIME_KUMA_WEB_HOSTNAME}; # Use your desired hostname

    # SSL Certs
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key;

    location / {
        proxy_pass http://uptime-kuma:3001;
        proxy_set_header Host $host;
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# --- ntfy Server Block (HTTPS) ---
# /etc/nginx/sites-*/ntfy
#
# This config allows insecure HTTP POST/PUT requests against topics to allow a short curl syntax (without -L
# and "https://" prefix). It also disables output buffering, which has worked well for the ntfy.sh server.
#
# This is pretty much how ntfy.sh is configured. To see the exact configuration,
# see https://github.com/binwiederhier/ntfy-ansible/

server {
  listen 80;
  server_name ${NTFY_WEB_HOSTNAME};

  location / {
    # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want 
    # it to work with curl without the annoying https:// prefix
    set $redirect_https "";
    if ($request_method = GET) {
      set $redirect_https "yes";
    }
    if ($request_uri ~* "^/([-_a-z0-9]{0,64}$|docs/|static/)") {
      set $redirect_https "${redirect_https}yes";
    }
    if ($redirect_https = "yesyes") {
      return 302 https://$http_host$request_uri$is_args$query_string;
    }

    proxy_pass http://ntfy:80;
    proxy_http_version 1.1;

    proxy_buffering off;
    proxy_request_buffering off;
    proxy_redirect off;

    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_connect_timeout 3m;
    proxy_send_timeout 3m;
    proxy_read_timeout 3m;

    client_max_body_size 0; # Stream request body to backend
  }
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${NTFY_WEB_HOSTNAME};

    # See https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=intermediate&openssl=1.1.1k&hsts=false&ocsp=false&guideline=5.6
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m; # about 40000 sessions
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # SSL Certs
    ssl_certificate /etc/ssl/homelab/${HOMELAB_HOSTNAME}.crt;
    ssl_certificate_key /etc/ssl/homelab/${HOMELAB_HOSTNAME}.key;

    location / {
        proxy_pass http://ntfy:80;
        proxy_http_version 1.1;

        proxy_buffering off;
        proxy_request_buffering off;
        proxy_redirect off;

        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_connect_timeout 3m;
        proxy_send_timeout 3m;
        proxy_read_timeout 3m;

        client_max_body_size 0; # Stream request body to backend
    }
}